<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import pandas as pd%%00010import re%%00010import numpy as np%%00010%%00010def aggregate(df, unit_var, aggregation_method, index_pattern, aggregation_pattern, new_name_start, new_name_suffix, aggregation_remove,%%00010              caller):%%00010    # t_start = timer()%%00010    list_of_columns_1 = []%%00010    list_of_columns_2 = []%%00010    new_columns_list = &quot;&quot;%%00010    id_double = 1%%00010%%00010    column_names = list(df.columns.values)%%00010%%00010    pattern_i = re.compile(index_pattern + &quot;$&quot;)  # $ asserts position at the end of a line%%00010    pattern_a = re.compile(aggregation_pattern + &quot;$&quot;)  # $ asserts position at the end of a line%%00010    pattern_u = re.compile(&quot;.*\[(.*)\].*&quot;)%%00010%%00010    list_of_names_with_conflicts = []%%00010    dict_of_names_with_conflicts = {}%%00010%%00010    isMatching1 = False%%00010%%00010    matcher1_list = {col: re.match(pattern_i, col) for col in df.columns if re.match(pattern_i, col)}%%00010    matcher2_list = {col: re.match(pattern_a, col) for col in df.columns if re.match(pattern_a, col)}%%00010%%00010    total_list_col1 = []%%00010    total_list_col2 = []%%00010%%00010    for col1, match1 in matcher1_list.items():%%00010        matcher_unit = re.match(pattern_u, col1)%%00010        colUnit = unit_var%%00010        try:%%00010        %%00009iterator1 = match1.group('i')%%00010        except:%%00010        %%00009iterator1 = match1.group(1)%%00010%%00010        numberGroups1 = len(match1.groups())%%00010        matchingIterator = False%%00010%%00010        if matcher_unit and colUnit == &quot;unit&quot;:%%00010            colUnit = matcher_unit.group(1)%%00010%%00010        for col2, match2 in matcher2_list.items():%%00010            numberGroups2 = len(match2.groups())%%00010            if numberGroups2 == 0:%%00010                new_name = new_name_start + &quot;_&quot; + iterator1 + new_name_suffix + &quot;[&quot; + colUnit + &quot;]&quot;%%00010                if new_name in new_columns_list or new_name in column_names:%%00010                    # raise Exception(&quot;A column with name &quot; + new_name + &quot; already exists!&quot;)%%00010                    new_name_temp = new_name + &quot; (#&quot; + str(id_double) + &quot;)&quot;%%00010                    id_double += 1%%00010                    if new_name in column_names:%%00010                        list_of_names_with_conflicts.append(new_name_temp)%%00010                        dict_of_names_with_conflicts[new_name_temp] = new_name%%00010                    new_name = new_name_temp%%00010%%00010                new_columns_list = new_columns_list + new_name + &quot;,&quot;%%00010%%00010                if col1 not in list_of_columns_1:%%00010                    list_of_columns_1.append(col1)%%00010                if col2 not in list_of_columns_2:%%00010                    list_of_columns_2.append(col2)%%00010%%00010                total_list_col1.append(col1)%%00010                total_list_col2.append(col2)%%00010%%00010            elif numberGroups2 == 1 or numberGroups2 == 2:  # Parallel operation%%00010                           %%00010%%00010                try:%%00010        %%00009        iterator2 = match2.group('i')%%00010                except:%%00010        %%00009        iterator2 = match2.group(1)%%00010                #iterator2 = match2.group(1)%%00010                if iterator1 == iterator2:%%00010                    matchingIterator = True%%00010                    new_name = new_name_start + '_' + match2.group(1)%%00010                    if numberGroups1 == 2:%%00010#                        if len(pattern_i.groupindex)&gt;0:%%00010#                            if pattern_i.groupindex['iterator'] == 2:%%00010#                                name_extension_1 = match1.group(1)%%00010#                            else:%%00010#                                name_extension_1 = match1.group(2)%%00010#                        else:%%00010#                            name_extension_1 = match1.group(2)%%00010%%00010                        new_name = new_name + &quot;_&quot; + match1.group(2)%%00010                    elif numberGroups2 == 2:%%00010#                        if len(pattern_a.groupindex)&gt;0:%%00010#                            if pattern_a.groupindex['iterator'] == 2:%%00010#                                name_extension_2 = match1.group(1)%%00010#                            else:%%00010#                                name_extension_2 = match1.group(2)%%00010#                        else:%%00010#                            name_extension_2 = match1.group(2)%%00010                        new_name = new_name + &quot;_&quot; + match2.group(2)%%00010%%00010                    new_name = new_name + new_name_suffix + &quot;[&quot; + colUnit + &quot;]&quot;%%00010                    if new_name in new_columns_list or new_name in column_names:%%00010                        # raise Exception(&quot;A column with name &quot; + new_name + &quot; already exists!&quot;)%%00010                        new_name_temp = new_name + &quot; (#&quot; + str(id_double) + &quot;)&quot;%%00010                        id_double += 1%%00010                        if new_name in column_names:%%00010                            list_of_names_with_conflicts.append(new_name_temp)%%00010                            dict_of_names_with_conflicts[new_name_temp] = new_name%%00010                        new_name = new_name_temp%%00010                    new_columns_list = new_columns_list + new_name + &quot;,&quot;%%00010%%00010                    if col1 not in list_of_columns_1:%%00010                        list_of_columns_1.append(col1)%%00010                    if col2 not in list_of_columns_2:%%00010                        list_of_columns_2.append(col2)%%00010%%00010                    total_list_col1.append(col1)%%00010                    total_list_col2.append(col2)%%00010%%00010            else:%%00010                raise Exception(&quot;Number of capture groups in aggregation pattern cannot be more than 2&quot;)%%00010        if not matchingIterator and numberGroups2 == 1:%%00010            raise Exception(&quot;Iterator not found in second column group: '&quot; + iterator1 + &quot;'&quot;)%%00010%%00010    if not matcher2_list:%%00010        raise Exception(&quot;No match found in input columns for pattern '&quot; + aggregation_pattern + &quot;'&quot;)%%00010    if not matcher1_list:%%00010        raise Exception(&quot;No match found in input columns for pattern \&quot;&quot; + index_pattern + &quot;\&quot;&quot;)%%00010%%00010     # perform computations and store results:%%00010%%00010    df_subset1 = df[total_list_col1]%%00010    df_subset2 = df[total_list_col2]%%00010%%00010    if aggregation_method == 'Product':%%00010        output = df_subset1 * df_subset2.values%%00010    elif aggregation_method == 'Sum':%%00010        output = df_subset1 + df_subset2.values%%00010    elif aggregation_method == &quot;Division 1/2&quot;:%%00010        if caller == &quot;CAL&quot;:%%00010            output = df_subset1.copy()%%00010            mask1 = (df_subset1 != 0)%%00010            mask2 = (df_subset2 != 0)%%00010            mask21 = mask2.copy()%%00010            mask21.columns = output.columns%%00010            mask3 = df_subset1.isna()%%00010            output[mask21] = df_subset1[mask21]/ df_subset2[mask2].values%%00010            output[-mask21 &amp; -mask3] = 100%%00010            output[-mask1] = 0%%00010        else:%%00010            output = df_subset1 / df_subset2.values%%00010            output = output.replace([np.inf, -np.inf], np.nan)%%00010    elif aggregation_method == &quot;Division 2/1&quot;:%%00010        output = df_subset2.values / df_subset1%%00010    elif aggregation_method == &quot;Subtraction 1-2&quot;:%%00010        output = df_subset1 - df_subset2.values%%00010    elif aggregation_method == &quot;Subtraction 2-1&quot;:%%00010        output = df_subset2.values - df_subset1%%00010    else:%%00010        raise Exception(&quot;Unknown aggregation method!&quot;)%%00010%%00010    list_of_new_column_names = new_columns_list.split(&quot;,&quot;)%%00010    del list_of_new_column_names[-1]%%00010    output.columns = list_of_new_column_names%%00010    if aggregation_remove == 1:%%00010        df = df.drop(list_of_columns_1+list_of_columns_2, axis=1)%%00010        output = output.rename(columns=dict_of_names_with_conflicts)%%00010%%00010    # t3 = timer()%%00010    # logger.info(&quot;Third timer: &quot; +str(t3-t2))%%00010%%00010    output_table = df.join(output)%%00010    # logger.info('Final timer: ' + str(timer() - t3))%%00010    # logger.info(&quot;Total TIMER: &quot; +str(timer()-t_start))%%00010    return output_table%%00010%%00010name_components = flow_variables['new_name_start'].split(',')%%00010if len(name_components) == 1:%%00010%%00009new_name_start = name_components[0]%%00010%%00009new_name_suffix = ''%%00010elif len(name_components) == 2:%%00010%%00009new_name_start = name_components[0]%%00010%%00009new_name_suffix = '_' + name_components[1]%%00010%%00009%%00010output_table = aggregate(input_table, flow_variables['unit_var'],flow_variables['aggregation_method'],flow_variables['index_pattern'],flow_variables['aggregation_pattern'],new_name_start,new_name_suffix,flow_variables['aggregation-remove'],flow_variables['tree_caller'])"/>
<entry key="rowLimit" type="xint" value="1000"/>
<entry key="pythonVersionOption" type="xstring" value="python3"/>
<entry key="chunkSize" type="xint" value="500000"/>
<entry key="convertMissingToPython" type="xboolean" value="false"/>
<entry key="convertMissingFromPython" type="xboolean" value="false"/>
<entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
<entry key="sentinelValue" type="xint" value="0"/>
<entry key="python2Command" type="xstring" value=""/>
<entry key="dialog_was_opened" type="xboolean" value="false"/>
<entry key="python3Command" type="xstring" value=""/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python2.nodes.script.Python2ScriptNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒1) (deprecated)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.3.2.v202103021016"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.3.3.v202105242123"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒1) (deprecated)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 122, Cols: 41"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="8d44fd50-3d84-4207-b06e-4ce013e562cd"/>
</config>
</config>
