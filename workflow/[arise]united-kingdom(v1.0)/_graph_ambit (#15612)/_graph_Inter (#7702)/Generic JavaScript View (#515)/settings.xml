<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="hideInWizard" type="xboolean" value="false"/>
<entry key="generateView" type="xboolean" value="true"/>
<entry key="maxRows" type="xint" value="2500"/>
<entry key="jsCode" type="xstring" value="var body = document.getElementsByTagName('body')[0];%%00010var html = &quot;&quot;;%%00010%%00010// Generic function that removes duplicates in an array%%00010var uniqueArray = function(arrArg) {%%00010  return arrArg.filter(function(elem, pos,arr) {%%00010    return arr.indexOf(elem) == pos;%%00010  });%%00010};%%00010%%00010if (knimeDataTable) {%%00010%%00009// Data preparation%%00010    var data = knimeDataTable.getRows();%%00010    var leveringraph = &quot;$${Slever_switch}$$&quot;;%%00010%%00010%%00009// Extract Years column and x values%%00010%%00009var x_column_name = &quot;Years&quot;;%%00010%%00009var x_column = knimeDataTable.getColumnNames().indexOf(x_column_name); %%00010%%00009var x_values = knimeDataTable.getColumn(x_column);%%00010%%00010%%00009// Extract variable and country names%%00010%%00009var columnList = knimeDataTable.getColumnNames().slice();%%00010    columnList.splice(x_column, 1);%%00010%%00009var varNames = uniqueArray(columnList.map(function(n) {return n.replace(/.*\+/, '');}));%%00010%%00009if (leveringraph == &quot;top&quot;){%%00010%%00009%%00009var varLevers = uniqueArray(columnList.map(function(n) {return n.replace(/\+.*/, '');}));%%00010%%00009%%00009var countryNames = uniqueArray(columnList.map(function(n) {return n.replace(/^.*?\+/, '').replace(/\+[^\+]+$/,'');}));%%00010%%00009} else {%%00010        var countryNames = uniqueArray(columnList.map(function(n) {return n.replace(/\+.*/, '');}));%%00010    }%%00010        %%00009%%00010%%00009// Build main HTML section%%00010%%00009html += '&lt;div id=&quot;content&quot;&gt;&lt;div id=&quot;controls&quot;&gt;&lt;/div&gt;';%%00010%%00009html += '&lt;svg class=&quot;chartcontainer&quot;&gt;&lt;/svg&gt;&lt;/div&gt;';%%00010%%00009body.innerHTML = html;%%00010%%00010%%00009var contentDiv = document.getElementById(&quot;content&quot;);%%00010%%00009var controlsDiv = document.getElementById(&quot;controls&quot;);%%00010%%00010%%00009var controls= d3.select('#controls')%%00010%%00009%%00009.attr('class', 'display-control')%%00010%%00009%%00009.attr('role', 'toggleDisplay');%%00010%%00010%%00009// Add Dropdown list for variables%%00010%%00009controls.append('span').text('Variable:');%%00010%%00009var dropdown1 = controls.append('span').append('select')%%00010%%00009%%00009.attr('id', 'varDropDown');%%00009%%00010%%00010%%00009// Populate list%%00010%%00009varNames.forEach(function(varName) {%%00010%%00009%%00009dropdown1.append('option').attr('value', varName).text(varName); %%00010%%00009%%00009});%%00010%%00009dropdown1.on(&quot;change&quot;, switchVariable);%%00010%%00010%%00009// Country filter checkbox, default unchecked with filter disabled%%00010%%00009var countryFilterBox = controls.append('span').append('input')%%00010%%00009%%00009.attr('type','checkbox')%%00010%%00009%%00009.attr('id','countryFilter')%%00010%%00009%%00009.on('change', toggleCountryFilter);%%00010%%00009%%00010%%00009// Add Dropdown list for countries, default disabled%%00010%%00009controls.append('span').text('Country filter:');%%00010%%00009var dropdown2 = controls.append('span').append('select')%%00010%%00009%%00009.attr('id', 'countryDropDown')%%00010%%00009%%00009.property('disabled', true);%%00010%%00009%%00009%%00010%%00009// Populate list%%00010%%00009countryNames.forEach(function(countryName) {%%00010%%00009%%00009dropdown2.append('option').attr('value', countryName).text(countryName); %%00010%%00009%%00009});%%00010%%00009dropdown2.on(&quot;change&quot;, switchCountry);%%00010    %%00010    if (leveringraph == &quot;top&quot;){%%00010%%00009// Lever filter checkbox, default unchecked with filter disabled%%00010%%00009var leverFilterBox = controls.append('span').append('input')%%00010%%00009%%00009.attr('type','checkbox')%%00010%%00009%%00009.attr('id','leverFilter')%%00010%%00009%%00009.on('change', toggleLeverFilter);%%00010%%00009%%00010%%00009// Add Dropdown list for lever, default disabled%%00010%%00009controls.append('span').text('Lever filter:');%%00010%%00009var dropdown3 = controls.append('span').append('select')%%00010%%00009%%00009.attr('id', 'leverDropDown')%%00010%%00009%%00009.property('disabled', true);%%00010%%00009%%00009%%00010%%00009// Populate list%%00010%%00009varLevers.forEach(function(varLever) {%%00010%%00009%%00009dropdown3.append('option').attr('value', varLever).text(varLever); %%00010%%00009%%00009});%%00010%%00009dropdown3.on(&quot;change&quot;, switchLever);%%00010    }%%00010%%00009//var radio1 = controls.append('div');%%00010%%00009/* radio1.append('input')%%00010%%00009%%00009.attr('type', 'radio')%%00010%%00009%%00009.attr('name', 'displayType')%%00010%%00009%%00009.property('checked', true);%%00010%%00009radio1.append('label')%%00010%%00009%%00009.text('Single variable (multi-country)');%%00010%%00009radio1.on(&quot;change&quot;, toggleData); */%%00010%%00010%%00009// Add canvas elements to page%%00010%%00009var svg = d3.select('svg');%%00010     var g = svg.append(&quot;g&quot;);%%00010%%00010%%00009// Creates vertical scale%%00010%%00009var y = d3.scaleLinear();%%00010%%00009var yAxisCall = d3.axisLeft();%%00009%%00010%%00009%%00010%%00009// Add Y axis%%00010%%00009g.append(&quot;g&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;y axis&quot;);%%00010%%00009%%00010%%00009// Creates horizontal scale%%00010%%00009var x = d3.scaleLinear();%%00010%%00009var xAxisCall = d3.axisBottom();%%00009%%00010%%00010%%00009// Add X axis%%00010%%00009g.append(&quot;g&quot;)%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;x axis&quot;)%%00010%%00009%%00010%%00009// Color scale for legend%%00010%%00009var z = d3.scaleOrdinal(d3.schemeCategory20);%%00010%%00009%%00010%%00009// Generate gridlines for x axis%%00010%%00009function make_x_gridlines() {%%00009%%00009%%00010%%00009    return d3.axisBottom(x)%%00010%%00009        .ticks()%%00010%%00009}%%00010%%00009%%00010%%00009// Generate gridlines for y axis%%00010%%00009function make_y_gridlines() {%%00009%%00009%%00010%%00009    return d3.axisLeft(y)%%00010%%00009        .ticks()%%00010%%00009}%%00010%%00010%%00009// Add gridlines to HTML%%00010%%00009var xgrid = g.append(&quot;g&quot;);%%00010%%00009var ygrid = g.append(&quot;g&quot;);%%00010  %%00010%%00009// Line generator%%00010%%00009var line = d3.line()%%00010%%00009%%00009.defined(function(d) {%%00010%%00009%%00009return d.y !== null;})%%00010%%00009%%00009.x(function(d) { return x(d.x)})%%00010%%00009%%00009.y(function(d) { return y(d.y)});%%00010%%00010%%00009// Legend%%00010%%00009var legendHolder = svg.append('g')%%00010%%00009%%00009.attr(&quot;class&quot;, &quot;legend-holder&quot;);%%00010%%00010%%00009redraw();%%00010%%00010%%00009// Event handler functions%%00010%%00009function switchCountry() {%%00010%%00009%%00009redraw();%%00010%%00009}%%00010%%00009function switchVariable() {%%00010%%00009%%00009redraw();%%00010    }%%00010%%00010%%00009function toggleCountryFilter() {%%00010%%00009%%00009dropdown2.property('disabled', !countryFilterBox.property('checked'));%%00010%%00009%%00009redraw();%%00010    }%%00010    %%00010    function switchLever() {%%00010        redraw();%%00010    }%%00010    function toggleLeverFilter() {%%00010        dropdown3.property('disabled', !leverFilterBox.property('checked'));%%00010        redraw();%%00010    }%%00010%%00010%%00009window.addEventListener(&quot;resize&quot;, redraw);%%00010%%00010%%00009/* function toggleData() {%%00010%%00009%%00009multi_countries = !multi_countries;%%00010%%00009%%00009redraw(); %%00010%%00009} */%%00010%%00010%%00009// Main function to draw the chart%%00010%%00009function redraw() {%%00010%%00009%%00009// Get variable names from HTML elements%%00010%%00009%%00009var sect = document.getElementById(&quot;varDropDown&quot;);%%00010%%00009%%00009var selected_variable = sect.options[sect.selectedIndex].text;%%00010%%00010%%00009%%00009var countryDropDown = document.getElementById(&quot;countryDropDown&quot;);%%00010%%00009%%00009var selected_country = countryDropDown.options[countryDropDown.selectedIndex].text;%%00010        var country_filter = countryFilterBox.property('checked');%%00010        %%00010        if (leveringraph == &quot;top&quot;){%%00010        var leverDropDown = document.getElementById(&quot;leverDropDown&quot;);%%00010%%00009%%00009var selected_lever = leverDropDown.options[leverDropDown.selectedIndex].text;%%00010        var lever_filter = leverFilterBox.property('checked');%%00010        }%%00010%%00010%%00009%%00009// Organise dataset as a list of countries, each with {id, values:{x,y}}%%00010%%00009%%00009var dataset = [];%%00010%%00009%%00009for (var colID = 0; colID &lt; knimeDataTable.getNumColumns(); colID++) {%%00010            var varName = knimeDataTable.getColumnNames()[colID].replace(/.*\+/, '');%%00010            if (leveringraph == &quot;top&quot;){%%00010            var countryName = knimeDataTable.getColumnNames()[colID].replace(/^.*?\+/, '').replace(/\+[^\+]+$/,'');%%00010            var varLever = knimeDataTable.getColumnNames()[colID].replace(/\+.*/, '');%%00010            } else {%%00010            var countryName = knimeDataTable.getColumnNames()[colID].replace(/\+.*/, ''); %%00010            }%%00010%%00009%%00009%%00009var colType = knimeDataTable.getColumnTypes()[colID];%%00010%%00009%%00010%%00009%%00009%%00009if (colType === 'number' &amp;&amp; colID != x_column &amp;&amp; varName == selected_variable &amp;&amp; (!country_filter || countryName == selected_country) &amp;&amp; (!lever_filter || varLever == selected_lever)) {%%00009%%00009%%00009%%00009%%00010                if (leveringraph == &quot;top&quot;){%%00010                dataset.push({%%00010                    //id: ((multi_countries) ? countryName : varName), // Column identifier%%00010                        id: countryName+&quot; - &quot;+varLever, // Column identifier%%00010                        values: data.map(function(d) { // Data%%00010%%00009%%00009%%00009%%00009%%00009%%00009return {x: d.data[x_column], y: d.data[colID]};%%00009%%00010%%00009%%00009%%00009%%00009%%00009%%00009})%%00010                    });%%00010%%00010                        } else {%%00010                            dataset.push({%%00010                                id: countryName, // Column identifier%%00010                                values: data.map(function(d) { // Data%%00010                                    return {x: d.data[x_column], y: d.data[colID]};%%00009%%00010                                    })%%00010                            });%%00010                    }%%00010%%00009%%00009%%00009%%00009%%00009%%00010%%00010%%00009%%00009%%00009  }%%00010%%00009%%00009%%00009}%%00010%%00010%%00009%%00009// Variables for scaling%%00010%%00009%%00009var svgWidth = contentDiv.clientWidth, svgHeight = contentDiv.clientHeight - controlsDiv.clientHeight; // Container size%%00010%%00009%%00009var margin = { top: 20, right: 100, bottom: 40, left: 100 }; %%00010%%00009%%00010%%00009%%00009var width = svgWidth - margin.left - margin.right; // Graph width%%00010%%00009%%00009var height = svgHeight - margin.top - margin.bottom; // Graph height%%00010%%00010%%00009%%00009// Update X axis and canvas%%00010        %%00009g.select(&quot;.x.axis&quot;)%%00010%%00009%%00009.attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;);%%00010        %%00009%%00010        %%00009svg%%00010     %%00009.attr('width', svgWidth)%%00010     %%00009.attr('height', svgHeight);%%00010     %%00009g%%00010   %%00009%%00009.attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);%%00010        %%00009%%00010%%00009%%00009// Calculate X and Y scales (input = domain, output = range)%%00010%%00009     x.domain(d3.extent(x_values))%%00010%%00009     %%00009.range([0, width]);%%00010%%00009%%00010%%00009%%00009y.domain([%%00010%%00009  %%00009%%00009%%00009d3.min(dataset, function(c) { return d3.min(c.values, function(r) { return r.y}) }),%%00010%%00009             %%00009d3.max(dataset, function(c) { return d3.max(c.values, function(r) { return r.y}) })*1.01%%00010%%00009             %%00009])%%00010%%00009%%00009%%00009.range([height, 0]);%%00010%%00010%%00009%%00009// Update Y axis%%00010%%00009%%00009yAxisCall.scale(y);%%00010%%00009%%00009svg.select(&quot;.y&quot;)%%00010%%00009%%00009%%00009.call(yAxisCall)%%00010%%00009%%00009%%00009.select(&quot;.domain&quot;).remove();%%00010%%00009%%00009%%00010%%00009%%00009svg.select(&quot;.yticks&quot;)%%00010%%00009%%00009%%00009.call(yAxisCall)%%00010%%00009%%00009%%00009%%00010%%00009%%00009// Update X axis%%00010%%00009%%00009xAxisCall.scale(x);%%00010%%00009%%00009xAxisCall.tickFormat(d3.format(&quot;&quot;));%%00010%%00009%%00009svg.select(&quot;.x&quot;).call(xAxisCall);%%00010%%00009%%00009%%00010%%00009%%00009// Add the X gridlines%%00010%%00009%%00009xgrid.attr(&quot;class&quot;, &quot;grid&quot;)%%00010%%00009%%00009 .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)%%00010%%00009%%00009 .call(make_x_gridlines()%%00010%%00009%%00009     .tickSize(-height)%%00010%%00009%%00009     .tickFormat(&quot;&quot;)%%00010%%00009%%00009 );%%00010%%00009%%00009 xgrid.select(&quot;.domain&quot;).remove();%%00010%%00009%%00009%%00010%%00009%%00009// Add the Y gridlines%%00010%%00009%%00009ygrid%%00010%%00009%%00009 .attr(&quot;class&quot;, &quot;grid&quot;)%%00010%%00009%%00009 .call(make_y_gridlines()%%00010%%00009%%00009     .tickSize(-width)%%00010%%00009%%00009     .tickFormat(&quot;&quot;)%%00010%%00009%%00009 );%%00010%%00009%%00009 ygrid.select(&quot;.domain&quot;).remove();%%00010%%00010%%00009%%00009// Add lines for each country%%00010%%00009%%00009var country = g.selectAll(&quot;.country&quot;).remove(); // Remove previous lines%%00010%%00009%%00009country = g.selectAll(&quot;.country&quot;)%%00010%%00009%%00009%%00009.data(dataset)%%00010%%00009%%00009%%00009.enter().append(&quot;g&quot;)  // Add one new &quot;country&quot; group for each line%%00010%%00009%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;country&quot;);%%00010%%00009%%00009country.append(&quot;path&quot;) // Add a &quot;path&quot; element in each country group%%00010%%00009%%00009%%00009.attr(&quot;class&quot;, &quot;line&quot;) %%00010%%00009%%00009%%00009.attr(&quot;d&quot;, function(d) { return line(d.values);}) // Line generator%%00010%%00009%%00009%%00009.style(&quot;stroke&quot;, function(d) { return z(d.id); }) // Line color%%00010%%00009%%00009%%00009  .append(&quot;svg:title&quot;) // Tooltip (browser default)%%00010%%00009%%00009%%00009%%00009.text(function(d) { return d.id; });%%00010%%00010%%00009%%00009// Append a circle for each datapoint %%00010%%00009%%00009%%00010%%00009%%00009country.selectAll(&quot;.dot&quot;)%%00010%%00009%%00009    .data(function(d) {return d.values}) // Joins the country data values with the dot elements%%00010%%00009%%00009  .enter().append(&quot;circle&quot;) // Append a circle for each value in each country%%00010%%00009%%00009    .attr(&quot;class&quot;, &quot;dot&quot;) // Assign a class for styling%%00010%%00009%%00009    .attr(&quot;cx&quot;, function(d, i) { return x(d.x); })%%00010%%00009%%00009    .attr(&quot;cy&quot;, function(d, i) { return y(d.y); })%%00010%%00009%%00009    .attr(&quot;stroke&quot;, function(d) { return z(d3.select(this.parentNode).datum().id); })%%00010%%00009%%00009    .attr(&quot;r&quot;, 3); %%00010%%00010%%00009     // Translate the legend holder to the right side of the graph%%00010%%00009%%00009legendHolder.attr('transform', &quot;translate(&quot; + (margin.left + width + margin.right -3) + &quot;,3)&quot;);%%00010%%00010%%00009%%00009// Update legend%%00010%%00009%%00009var legend = legendHolder.selectAll(&quot;.legend&quot;).remove();%%00010%%00009%%00009legend = legendHolder.selectAll(&quot;.legend&quot;)%%00010%%00009%%00009    .data(dataset)%%00010%%00009%%00009  .enter().append(&quot;g&quot;)%%00010%%00009%%00009    .attr(&quot;class&quot;, &quot;legend&quot;)%%00010%%00009%%00009    .attr(&quot;transform&quot;, function(d, i) { return &quot;translate(0,&quot; + i * 12 + &quot;)&quot;; });%%00010%%00009%%00009%%00010%%00009%%00009legend.append(&quot;rect&quot;)%%00010%%00009%%00009  .attr(&quot;x&quot;, -10)%%00010%%00009%%00009  .attr(&quot;width&quot;, 10)%%00010%%00009%%00009  .attr(&quot;height&quot;, 10)%%00010%%00009%%00009  .style(&quot;fill&quot;, function(d) { return z(d.id); });%%00010%%00009%%00009%%00010%%00009%%00009legend.append(&quot;text&quot;)%%00010%%00009%%00009  .attr(&quot;x&quot;, -12)%%00010%%00009%%00009  .attr(&quot;y&quot;, 5)%%00010%%00009%%00009  .attr(&quot;dy&quot;, &quot;.35em&quot;)%%00010%%00009%%00009  .style(&quot;text-anchor&quot;, &quot;end&quot;)%%00010%%00009%%00009  .text(function(d) { return d.id; });%%00009   %%00010%%00009}%%00010%%00010} else {%%00010    html += '&lt;div class=&quot;failure&quot;&gt;No data available.&lt;/div&gt;';%%00010    body.innerHTML = html;%%00010}%%00010%%00010"/>
<entry key="jsSVGCode" type="xstring" value=""/>
<entry key="cssCode" type="xstring" value="#content {%%00010        position: fixed;%%00010        left: 10px;%%00010        right: 10px;%%00010        top: 10px;%%00010        bottom: 10px;%%00009%%00010}%%00010body {%%00010    font-family: sans-serif;%%00010}%%00010h1 {%%00010    font-size: 1.5em;%%00010    font-weight: bold;%%00010}%%00010.success {%%00010    color: #006633;%%00010    font-weight: bold;%%00010}%%00010%%00010.failure {%%00010    color: #990000;%%00010    font-weight: bold;%%00010}%%00010.chartcontainer {%%00010   border: 1px solid lightgray;%%00010}%%00010.grid line {%%00010  stroke: #ddd;%%00010}%%00010.line {%%00010    fill: none;%%00010    stroke: steelblue;%%00010    stroke-width: 1.5;%%00010}%%00010.dot {%%00010    fill: white;%%00010}%%00010.legend {%%00010%%00009font: 10px sans-serif;%%00010%%00009color: green;%%00010}%%00010.axis { font: 10px sans-serif; }%%00010.display-control {font-size: 12px;}"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="D3_4.2.6"/>
</config>
<entry key="waitTime" type="xint" value="0"/>
<config key="outputVariables">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="customCSS" type="xstring" value=""/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="JS view"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="2847"/>
<entry key="y-coordinate" type="xint" value="419"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="15"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.js.base.node.viz.generic3.GenericJSViewNodeFactory"/>
<entry key="node-name" type="xstring" value="Generic JavaScript View"/>
<entry key="node-bundle-name" type="xstring" value="KNIME JavaScript Base Views"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.js.views"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="4.3.0.v202011211957"/>
<entry key="node-feature-name" type="xstring" value="KNIME JavaScript Views"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.js.views.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="4.3.3.v202105242123"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Generic JavaScript View"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.node.port.inactive.InactiveBranchPortObjectSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.port.inactive.InactiveBranchPortObject"/>
<entry key="port_object_summary" type="xstring" value="Inactive Port Object"/>
<entry key="port_spec_location" type="xstring" value="spec/spec.zip"/>
<entry key="port_object_location" type="xstring" value="object/portobject.zip"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.node.port.flowvariable.FlowVariablePortObjectSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.port.flowvariable.FlowVariablePortObject"/>
<entry key="port_object_summary" type="xstring" value="Variables connection"/>
<entry key="port_spec_location" type="xstring" value="spec/spec.zip"/>
<entry key="port_object_location" type="xstring" value="object/portobject.zip"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" value="39bec91c-c1e4-4121-8eb6-70bbb03728d0"/>
</config>
</config>
